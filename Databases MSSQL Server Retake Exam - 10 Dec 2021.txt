CREATE DATABASE Airport
   USE Airport


01. DDL
--CREATE TABLE Passengers
--(
--Id INT PRIMARY KEY IDENTITY,
--FullName VARCHAR(100) UNIQUE NOT NULL,
--Email VARCHAR(50) UNIQUE NOT NULL
--)
--
--CREATE TABLE Pilots
--(
--Id INT PRIMARY KEY IDENTITY,
--FirstName VARCHAR(30) UNIQUE NOT NULL,
--LastName VARCHAR(30) UNIQUE NOT NULL,
--Age TINYINT CHECK(Age >= 21 AND Age <= 62) NOT NULL,
--Rating FLOAT CHECK(Rating >= 0.0 AND Rating <= 10.0)
--)
--
--CREATE TABLE AircraftTypes 
--(
--Id INT PRIMARY KEY IDENTITY,
--TypeName VARCHAR(30) UNIQUE NOT NULL
--)
--
--CREATE TABLE Aircraft
--(
--Id INT PRIMARY KEY IDENTITY,
--Manufacturer VARCHAR(25) NOT NULL,
--Model VARCHAR(30) NOT NULL,
--[Year] INT NOT NULL,
--FlightHours INT,
--Condition CHAR(1) NOT NULL,
--TypeId INT FOREIGN KEY REFERENCES AircraftTypes(Id) NOT NULL
--)
--
--CREATE TABLE PilotsAircraft
--(
--AircraftId INT FOREIGN KEY REFERENCES Aircraft(Id) NOT NULL,
--PilotId INT FOREIGN KEY REFERENCES Pilots(Id) NOT NULL,
--CONSTRAINT PK_PilotsAircraft PRIMARY KEY (AircraftId, PilotId)
--)
--
--CREATE TABLE Airports
--(
--Id INT PRIMARY KEY IDENTITY,
--AirportName VARCHAR(70) UNIQUE NOT NULL,
--Country VARCHAR(100) UNIQUE NOT NULL
--)
--
--CREATE TABLE FlightDestinations
--(
--Id INT PRIMARY KEY IDENTITY,
--AirportId INT FOREIGN KEY REFERENCES Airports(Id) NOT NULL,
--Start DATETIME NOT NULL,
--AircraftId INT FOREIGN KEY REFERENCES Aircraft(Id) NOT NULL,
--PassengerId INT FOREIGN KEY REFERENCES Passengers(Id) NOT NULL,
--TicketPrice DECIMAL(18, 2) DEFAULT 15 NOT NULL
--)


02. Insert
--INSERT INTO Passengers (FullName, Email)
--SELECT FirstName + ' ' + LastName,
--       FirstName + LastName + '@gmail.com'
--  FROM Pilots p 
-- WHERE p.Id BETWEEN 5 AND 15


03. Update
--UPDATE Aircraft
--   SET Condition = 'A'
-- WHERE 
--	      (
--			Condition = 'C' 
--		 OR 
--			Condition = 'B'
--	      )
--	    AND
--	      (
--			FlightHours IS NULL
--		 OR
--			FlightHours <= 100
--	      )
--	    AND
--	      (
--			[Year] >= 2013
--	      )


04. Delete
--DELETE
--  FROM Passengers
-- WHERE LEN(FullName) <= 10


05. Aircraft
--SELECT a.Manufacturer, a.Model, a.FlightHours, a.Condition
--  FROM Aircraft a
-- ORDER BY a.FlightHours DESC


06. Pilots and Aircrafts
--SELECT p.FirstName, p.LastName, a.Manufacturer, a.Model, a.FlightHours
--  FROM Pilots p
--  FULL JOIN PilotsAircraft pa ON pa.PilotId = p.Id
--  JOIN Aircraft a ON a.Id = pa.AircraftId
-- WHERE a.FlightHours <= 304
-- ORDER BY a.FlightHours DESC, p.FirstName ASC


07. TOP 20 Flight Destinations
--SELECT TOP(20) fd.Id AS DestinationId, fd.Start, p.FullName, a.AirportName, fd.TicketPrice
--  FROM FlightDestinations fd
--  JOIN Airports a ON fd.AirportId = a.Id
--  JOIN Passengers p ON p.Id = fd.PassengerId
-- WHERE DAY(fd.Start) % 2 = 0
-- ORDER BY fd.TicketPrice DESC, a.AirportName ASC


08. Number of flights fore each aircraft
--SELECT a.Id, a.Manufacturer, a.FlightHours, COUNT(fd.AircraftId), ROUND(AVG(fd.TicketPrice), 2)
--  FROM Aircraft a
--  JOIN FlightDestinations fd ON fd.AircraftId = a.Id
-- GROUP BY a.Id, a.Manufacturer, a.FlightHours
--HAVING COUNT(fd.AircraftId) >= 2
-- ORDER BY COUNT(fd.AircraftId) DESC, a.Id


09. Regular passengers
--SELECT p.FullName, COUNT(fd.PassengerId) AS CountOfAircraft, SUM(TicketPrice) AS TotalPayed
--  FROM Passengers p
--  JOIN FlightDestinations fd ON fd.PassengerId = p.Id
-- GROUP BY p.FullName
--HAVING p.FullName LIKE '_a%' AND COUNT(fd.PassengerId) >= 2
-- ORDER BY p.FullName


10. Full info for Flight Destinations
--SELECT a.AirportName, fd.Start, fd.TicketPrice, p.FullName, air.Manufacturer, air.Model
--  FROM (SELECT *
--	    FROM FlightDestinations fd
--	   WHERE DATEPART(HOUR, fd.Start) BETWEEN 6 AND 20) fd
--  JOIN Airports a ON a.Id = fd.AirportId
--  JOIN Passengers p ON p.Id = fd.PassengerId
--  JOIN Aircraft air ON air.Id = fd.AircraftId
-- WHERE fd.TicketPrice > 2500					 
-- ORDER BY air.Model ASC


11. Find all destinations by email address
-- CREATE FUNCTION udf_FlightDestinationsByEmail(@email VARCHAR(100))
--RETURNS INT
--     AS
--	     BEGIN
--	   DECLARE @return INT
--	       SET @return = 
--			(
--			SELECT COUNT(fd.Id)
--			  FROM FlightDestinations fd
--			  JOIN Passengers p ON p.Id = fd.PassengerId
--			 WHERE p.Email = @email
--			)
--	    RETURN @return
--    	       END


12. Full info for Airports
--CREATE PROCEDURE usp_SearchByAirportName @airportName NVARCHAR(70)
--    AS
--SELECT a.AirportName, 
--	 p.FullName, 
--	 CASE
--		WHEN fd.TicketPrice <= 400 THEN 'Low'
--		WHEN fd.TicketPrice BETWEEN 401 AND 1500 THEN 'Medium'
--		WHEN fd.TicketPrice > 1500 THEN 'High'
--	  END AS LevelOfTicketPrice,
--	 air.Manufacturer,
--	 air.Condition,
--	 airt.TypeName
--  FROM Airports a
--  JOIN FlightDestinations fd ON fd.AirportId = a.Id
--  JOIN Passengers p ON p.Id = fd.PassengerId
--  JOIN Aircraft air ON air.Id = fd.AircraftId
--  JOIN AircraftTypes airt ON airt.Id = air.TypeId
-- WHERE a.AirportName = @airportName
-- GROUP BY A.AirportName, p.FullName, fd.TicketPrice, air.Manufacturer, air.Condition, airt.TypeName
-- ORDER BY air.Manufacturer, p.FullName